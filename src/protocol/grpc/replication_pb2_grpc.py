# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from src.protocol.grpc import replication_pb2 as replication__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in replication_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ReplicationServiceStub(object):
    """Service for internal replication between server replicas
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/replication.ReplicationService/Heartbeat',
                request_serializer=replication__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=replication__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.ReplicateOperation = channel.unary_unary(
                '/replication.ReplicationService/ReplicateOperation',
                request_serializer=replication__pb2.OperationRequest.SerializeToString,
                response_deserializer=replication__pb2.OperationResponse.FromString,
                _registered_method=True)
        self.JoinNetwork = channel.unary_unary(
                '/replication.ReplicationService/JoinNetwork',
                request_serializer=replication__pb2.JoinRequest.SerializeToString,
                response_deserializer=replication__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.GetNetworkState = channel.unary_unary(
                '/replication.ReplicationService/GetNetworkState',
                request_serializer=replication__pb2.NetworkStateRequest.SerializeToString,
                response_deserializer=replication__pb2.NetworkStateResponse.FromString,
                _registered_method=True)


class ReplicationServiceServicer(object):
    """Service for internal replication between server replicas
    """

    def Heartbeat(self, request, context):
        """Heartbeat to check if a server is alive and share state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateOperation(self, request, context):
        """Replicate operation to followers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinNetwork(self, request, context):
        """Join the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNetworkState(self, request, context):
        """Get the current state of the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=replication__pb2.HeartbeatRequest.FromString,
                    response_serializer=replication__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ReplicateOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateOperation,
                    request_deserializer=replication__pb2.OperationRequest.FromString,
                    response_serializer=replication__pb2.OperationResponse.SerializeToString,
            ),
            'JoinNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinNetwork,
                    request_deserializer=replication__pb2.JoinRequest.FromString,
                    response_serializer=replication__pb2.JoinResponse.SerializeToString,
            ),
            'GetNetworkState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetworkState,
                    request_deserializer=replication__pb2.NetworkStateRequest.FromString,
                    response_serializer=replication__pb2.NetworkStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'replication.ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('replication.ReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """Service for internal replication between server replicas
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.ReplicationService/Heartbeat',
            replication__pb2.HeartbeatRequest.SerializeToString,
            replication__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.ReplicationService/ReplicateOperation',
            replication__pb2.OperationRequest.SerializeToString,
            replication__pb2.OperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JoinNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.ReplicationService/JoinNetwork',
            replication__pb2.JoinRequest.SerializeToString,
            replication__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNetworkState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replication.ReplicationService/GetNetworkState',
            replication__pb2.NetworkStateRequest.SerializeToString,
            replication__pb2.NetworkStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

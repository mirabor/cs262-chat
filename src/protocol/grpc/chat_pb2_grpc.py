# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protocol.grpc.chat_pb2 as chat__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chat_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ReplicationServiceStub(object):
    """The replication service for server-to-server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectPeer = channel.unary_unary(
                '/chat.ReplicationService/ConnectPeer',
                request_serializer=chat__pb2.ConnectRequest.SerializeToString,
                response_deserializer=chat__pb2.ConnectResponse.FromString,
                _registered_method=True)


class ReplicationServiceServicer(object):
    """The replication service for server-to-server communication
    """

    def ConnectPeer(self, request, context):
        """Connect to a peer server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectPeer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectPeer,
                    request_deserializer=chat__pb2.ConnectRequest.FromString,
                    response_serializer=chat__pb2.ConnectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ReplicationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ReplicationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ReplicationService(object):
    """The replication service for server-to-server communication
    """

    @staticmethod
    def ConnectPeer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ReplicationService/ConnectPeer',
            chat__pb2.ConnectRequest.SerializeToString,
            chat__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChatServiceStub(object):
    """The chat service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Signup = channel.unary_unary(
                '/chat.ChatService/Signup',
                request_serializer=chat__pb2.SignupRequest.SerializeToString,
                response_deserializer=chat__pb2.UserResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/chat.ChatService/Login',
                request_serializer=chat__pb2.LoginRequest.SerializeToString,
                response_deserializer=chat__pb2.UserResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/chat.ChatService/DeleteUser',
                request_serializer=chat__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=chat__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetUserMessageLimit = channel.unary_unary(
                '/chat.ChatService/GetUserMessageLimit',
                request_serializer=chat__pb2.GetUserMessageLimitRequest.SerializeToString,
                response_deserializer=chat__pb2.MessageLimitResponse.FromString,
                _registered_method=True)
        self.SaveSettings = channel.unary_unary(
                '/chat.ChatService/SaveSettings',
                request_serializer=chat__pb2.SaveSettingsRequest.SerializeToString,
                response_deserializer=chat__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.GetUsersToDisplay = channel.unary_unary(
                '/chat.ChatService/GetUsersToDisplay',
                request_serializer=chat__pb2.GetUsersToDisplayRequest.SerializeToString,
                response_deserializer=chat__pb2.UsersDisplayResponse.FromString,
                _registered_method=True)
        self.GetChats = channel.unary_unary(
                '/chat.ChatService/GetChats',
                request_serializer=chat__pb2.GetChatsRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatsResponse.FromString,
                _registered_method=True)
        self.StartChat = channel.unary_unary(
                '/chat.ChatService/StartChat',
                request_serializer=chat__pb2.StartChatRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatResponse.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/chat.ChatService/GetMessages',
                request_serializer=chat__pb2.GetMessagesRequest.SerializeToString,
                response_deserializer=chat__pb2.MessagesResponse.FromString,
                _registered_method=True)
        self.SendChatMessage = channel.unary_unary(
                '/chat.ChatService/SendChatMessage',
                request_serializer=chat__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=chat__pb2.MessageResponse.FromString,
                _registered_method=True)
        self.DeleteMessages = channel.unary_unary(
                '/chat.ChatService/DeleteMessages',
                request_serializer=chat__pb2.DeleteMessagesRequest.SerializeToString,
                response_deserializer=chat__pb2.StatusResponse.FromString,
                _registered_method=True)


class ChatServiceServicer(object):
    """The chat service definition
    """

    def Signup(self, request, context):
        """User Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserMessageLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsersToDisplay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChats(self, request, context):
        """Chat Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Signup': grpc.unary_unary_rpc_method_handler(
                    servicer.Signup,
                    request_deserializer=chat__pb2.SignupRequest.FromString,
                    response_serializer=chat__pb2.UserResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=chat__pb2.LoginRequest.FromString,
                    response_serializer=chat__pb2.UserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=chat__pb2.DeleteUserRequest.FromString,
                    response_serializer=chat__pb2.StatusResponse.SerializeToString,
            ),
            'GetUserMessageLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserMessageLimit,
                    request_deserializer=chat__pb2.GetUserMessageLimitRequest.FromString,
                    response_serializer=chat__pb2.MessageLimitResponse.SerializeToString,
            ),
            'SaveSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveSettings,
                    request_deserializer=chat__pb2.SaveSettingsRequest.FromString,
                    response_serializer=chat__pb2.StatusResponse.SerializeToString,
            ),
            'GetUsersToDisplay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsersToDisplay,
                    request_deserializer=chat__pb2.GetUsersToDisplayRequest.FromString,
                    response_serializer=chat__pb2.UsersDisplayResponse.SerializeToString,
            ),
            'GetChats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChats,
                    request_deserializer=chat__pb2.GetChatsRequest.FromString,
                    response_serializer=chat__pb2.ChatsResponse.SerializeToString,
            ),
            'StartChat': grpc.unary_unary_rpc_method_handler(
                    servicer.StartChat,
                    request_deserializer=chat__pb2.StartChatRequest.FromString,
                    response_serializer=chat__pb2.ChatResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=chat__pb2.GetMessagesRequest.FromString,
                    response_serializer=chat__pb2.MessagesResponse.SerializeToString,
            ),
            'SendChatMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatMessage,
                    request_deserializer=chat__pb2.SendMessageRequest.FromString,
                    response_serializer=chat__pb2.MessageResponse.SerializeToString,
            ),
            'DeleteMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessages,
                    request_deserializer=chat__pb2.DeleteMessagesRequest.FromString,
                    response_serializer=chat__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chat.ChatService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """The chat service definition
    """

    @staticmethod
    def Signup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/Signup',
            chat__pb2.SignupRequest.SerializeToString,
            chat__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/Login',
            chat__pb2.LoginRequest.SerializeToString,
            chat__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/DeleteUser',
            chat__pb2.DeleteUserRequest.SerializeToString,
            chat__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserMessageLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetUserMessageLimit',
            chat__pb2.GetUserMessageLimitRequest.SerializeToString,
            chat__pb2.MessageLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/SaveSettings',
            chat__pb2.SaveSettingsRequest.SerializeToString,
            chat__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsersToDisplay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetUsersToDisplay',
            chat__pb2.GetUsersToDisplayRequest.SerializeToString,
            chat__pb2.UsersDisplayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetChats',
            chat__pb2.GetChatsRequest.SerializeToString,
            chat__pb2.ChatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/StartChat',
            chat__pb2.StartChatRequest.SerializeToString,
            chat__pb2.ChatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/GetMessages',
            chat__pb2.GetMessagesRequest.SerializeToString,
            chat__pb2.MessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendChatMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/SendChatMessage',
            chat__pb2.SendMessageRequest.SerializeToString,
            chat__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chat.ChatService/DeleteMessages',
            chat__pb2.DeleteMessagesRequest.SerializeToString,
            chat__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

syntax = "proto3";

package replication;

// Service for internal replication between server replicas
service ReplicationService {
  // Heartbeat to check if a server is alive and share state
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

  // Replicate operation to followers
  rpc ReplicateOperation(OperationRequest) returns (OperationResponse) {}

  // Join the network
  rpc JoinNetwork(JoinRequest) returns (JoinResponse) {}

  // Get the current state of the network
  rpc GetNetworkState(NetworkStateRequest) returns (NetworkStateResponse) {}
}

// Server information
message ServerInfo {
  string server_id = 1;
  string address = 2; // host:port
  string role = 3;    // "leader" or "follower"
}

// Heartbeat request
message HeartbeatRequest {
  string server_id = 1;
  int64 term = 2;      // Current term/epoch
  string role = 3;     // "leader" or "follower"
  int64 timestamp = 4; // Current timestamp
}

// Heartbeat response
message HeartbeatResponse {
  bool success = 1;
  string server_id = 2;
  int64 term = 3;
  string role = 4;
}

// Generic operation to replicate
message OperationRequest {
  string service_name = 1;      // Name of the service (e.g., "BusinessService")
  string method_name = 2;       // Name of the method (e.g., "Add", "Subtract")
  bytes serialized_request = 3; // Serialized request proto message
  int64 operation_id = 4;       // Unique ID for the operation
  string server_id = 5;         // Server that received the operation
  int64 term = 6;               // Current term/epoch
}

// Response for operation replication
message OperationResponse {
  bool success = 1;
  string server_id = 2;
}

// Request to join the network
message JoinRequest {
  string server_id = 1;
  string address = 2; // host:port
}

// Response for join request
message JoinResponse {
  bool success = 1;
  repeated ServerInfo servers = 2; // List of all servers in the network
  string leader_id = 3;            // Current leader's ID
  int64 term = 4;                  // Current term/epoch
  map<string, string> server_addresses = 5; // Map of server_id to address
}

// Request for network state
message NetworkStateRequest { string server_id = 1; }

// Response with network state
message NetworkStateResponse {
  repeated ServerInfo servers = 1; // List of all servers in the network
  string leader_id = 2;            // Current leader's ID
  int64 term = 3;                  // Current term/epoch
}

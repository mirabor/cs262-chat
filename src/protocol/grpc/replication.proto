syntax = "proto3";

package replication;

// Service for handling replication and consensus between server replicas
service ReplicationService {
  // AppendEntries RPC is used for:
  // 1. Leader heartbeat (empty entries array)
  // 2. Log replication (entries array contains log entries to replicate)
  rpc AppendEntries(EntriesRequest) returns (AckResponse) {}

  // RequestVote RPC is used by candidates to gather VoteRequest
  // Will use this for leader-based replication version, time permitting
  // (see issue: https://github.com/mirabor/cs262-chat/issues/111)
  rpc RequestVote(VoteRequest) returns (VoteResponse) {}
}

// Request containing log entries to be replicated
message EntriesRequest {
  int64 term = 1;           // leader's term
  string leader_id = 2;     // leader's ID so followers can redirect clients
  int64 prev_log_index = 3; // index of log entry immediately preceding new ones
  int64 prev_log_term = 4;  // term of prev_log_index entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
  int64 leader_commit = 6;       // leader's commit_index
}

// Response to AppendEntries RPC
message AckResponse {
  int64 term = 1;   // current term, for leader to update itself
  bool success = 2; // true if follower contained entry matching prev_log_index
                    // and prev_log_term
}

// Request vote from other servers
message VoteRequest {
  int64 term = 1;           // candidate's term
  string candidate_id = 2;  // candidate requesting vote
  int64 last_log_index = 3; // index of candidate's last log entry
  int64 last_log_term = 4;  // term of candidate's last log entry
}

// Response to RequestVote RPC
message VoteResponse {
  int64 term = 1;        // current term, for candidate to update itself
  bool vote_granted = 2; // true means candidate received vote
}

// Log entry containing a command for the state machine
message LogEntry {
  int64 term = 1;    // term when entry was received by leader
  int64 index = 2;   // index of the log entry
  bytes command = 3; // command to be applied to the state machine
}
